"""Utility script to manage CVE replication labs."""

from __future__ import annotations

import argparse
import shutil
import subprocess
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, Optional


BASE_DIR = Path(__file__).resolve().parent


@dataclass
class Lab:
    name: str
    description: str
    path: Path

    @property
    def compose_file(self) -> Path:
        return self.path / "docker-compose.yml"

    def exists(self) -> bool:
        return self.compose_file.exists()


LABS: Dict[str, Lab] = {
    "outlook-ntlm-leak": Lab(
        name="outlook-ntlm-leak",
        description="Simulates Outlook NTLM leak exploitation (CVE-2023-23397)",
        path=BASE_DIR / "labs" / "outlook-ntlm-leak",
    ),
    "openssh-rce": Lab(
        name="openssh-rce",
        description="OpenSSH 9.2 environment for CVE-2023-38408 research",
        path=BASE_DIR / "labs" / "openssh-rce",
    ),
}


def ensure_docker_available() -> bool:
    return shutil.which("docker") is not None


def run_compose(lab: Lab, command: str, extra: Optional[list[str]] = None) -> None:
    compose_file = lab.compose_file
    if not compose_file.exists():
        raise SystemExit(f"[!] docker-compose.yml missing for lab {lab.name}")
    executable = shutil.which("docker")
    if not executable:
        raise SystemExit("[!] docker executable not found on PATH")
    cmd = ["docker", "compose", "-f", str(compose_file), command]
    if extra:
        cmd.extend(extra)
    print(f"[+] Running: {' '.join(cmd)}")
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as exc:
        raise SystemExit(f"[!] docker compose {command} failed: {exc}") from exc


def list_labs() -> None:
    print("Available labs:\n")
    for lab in LABS.values():
        status = "ready" if lab.exists() else "missing files"
        print(f" - {lab.name:18} {status:12} :: {lab.description}")


def describe_lab(lab_name: str) -> None:
    lab = LABS.get(lab_name)
    if not lab:
        raise SystemExit(f"Unknown lab: {lab_name}")
    readme = lab.path / "README.md"
    print(f"=== {lab.name} ===")
    print(lab.description)
    if readme.exists():
        print("\n" + readme.read_text(encoding="utf8"))
    else:
        print("No README found for this lab.")


def prepare_lab(lab_name: str, dry_run: bool) -> None:
    lab = LABS.get(lab_name)
    if not lab:
        raise SystemExit(f"Unknown lab: {lab_name}")
    if dry_run:
        print(f"[DRY RUN] Would run docker compose up for {lab.name}")
        return
    run_compose(lab, "up", ["-d", "--build"])


def destroy_lab(lab_name: str, dry_run: bool) -> None:
    lab = LABS.get(lab_name)
    if not lab:
        raise SystemExit(f"Unknown lab: {lab_name}")
    if dry_run:
        print(f"[DRY RUN] Would run docker compose down -v for {lab.name}")
        return
    run_compose(lab, "down", ["-v"])


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Manage CVE replication labs")
    sub = parser.add_subparsers(dest="command", required=True)

    sub.add_parser("list", help="List available labs")

    describe = sub.add_parser("describe", help="Show lab documentation")
    describe.add_argument("lab", choices=LABS.keys())

    prepare = sub.add_parser("prepare", help="Start lab environment with docker compose")
    prepare.add_argument("lab", choices=LABS.keys())
    prepare.add_argument("--dry-run", action="store_true", help="Only print commands")

    destroy = sub.add_parser("destroy", help="Tear down lab containers")
    destroy.add_argument("lab", choices=LABS.keys())
    destroy.add_argument("--dry-run", action="store_true", help="Only print commands")

    return parser.parse_args()


def main() -> None:
    args = parse_args()
    if args.command == "list":
        list_labs()
    elif args.command == "describe":
        describe_lab(args.lab)
    elif args.command == "prepare":
        prepare_lab(args.lab, args.dry_run)
    elif args.command == "destroy":
        destroy_lab(args.lab, args.dry_run)


if __name__ == "__main__":
    main()
